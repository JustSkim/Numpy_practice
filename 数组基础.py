# -*- coding: UTF-8 –*-
# 上面这一行是python头文件的声明
# 缺省情况下程序需要用ascii码书写，但如果其中写中文的话，python解释器会报错

a = np.array([0, 1, 2, 3, 4])

bb = (0,1,2,3,4)
#print(type(bb))
#<class 'tuple'>  
#你也可以将该print语句写作如下形式
print(type((0,1,2,3,4)))

b = np.array(bb)
#这一句的效果和 b = np.array((0,1,2,3,4))是一样的

c = np.arange(5)
d = np.linspace(0, 2*np.pi, 5)
'''
创建数组的4种不同方法。最基本的方法是将序列传递给NumPy的array()函数; 
你可以传递任何序列（类数组），而不仅仅是常见的列表（list）数据类型
'''

print(a) # >>>[0 1 2 3 4]
print(b) # >>>[0 1 2 3 4]
print(c) # >>>[0 1 2 3 4]
print(d) # >>>[ 0.          1.57079633  3.14159265  4.71238898  6.28318531]
print(a[3]) # >>>3


# MD Array,
a = np.array([[11, 12, 13, 14, 15],
              [16, 17, 18, 19, 20],
              [21, 22, 23, 24, 25],
              [26, 27, 28 ,29, 30],
              [31, 32, 33, 34, 35]])
 
print("a[2,4]: \n",a[2,4]) # >>>25
'''
为了创建一个2D（二维）数组，我们传递一个列表的列表（或者是一个序列的序列）给array()函数。
如果我们想要一个3D（三维）数组，我们就要传递一个列表的列表的列表，
如果是一个4D（四维）数组，那就是列表的列表的列表的列表，以此类推
'''

# MD slicing
print(a[0, 1:4]) # >>>[12 13 14]
print(a[1:4, 0]) # >>>[16 21 26]
print(a[::2,::2]) # >>>[[11 13 15]
                  #     [21 23 25]
                  #     [31 33 35]]
print(a[:, 1]) # >>>[12 17 22 27 32]
'''
通过对每个以逗号分隔的维度执行单独的切片，你可以对多维数组进行切片。
因此，对于2D数组，我们的第一片定义了行的切片，第二片定义了列的切片。
注意，只需输入数字就可以指定行或列。上面的第一个示例从数组中选择第0列。
'''


# Array properties
#使用 NumPy 时，你会想知道数组的某些信息。
#很幸运，在这个包里边包含了很多便捷的方法，可以给你想要的信息。
a = np.array([[11, 12, 13, 14, 15],
              [16, 17, 18, 19, 20],
              [21, 22, 23, 24, 25],
              [26, 27, 28 ,29, 30],
              [31, 32, 33, 34, 35]])

print(type(a)) # >>><class 'numpy.ndarray'>
print(a.dtype) # >>>int64
print(a.size) # >>>25
print(a.shape) # >>>(5, 5)      数组的形状是它有多少行和列

print(a.itemsize) # >>>8
#itemsize属性是每个项占用的字节数。这个数组的数据类型是int 64，
#而一个int 64中有64位，一个字节中有8位，64除以8为8，所以该项占了8字节

print(a.ndim) # >>>2        ndim 属性是数组的维数
print(a.nbytes) # >>>200    nbytes 属性是数组中的所有数据消耗掉的字节数
#由于 nbyte 属性并不计算数组的开销，因此数组占用的实际空间将稍微大一点。